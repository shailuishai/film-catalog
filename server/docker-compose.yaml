services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: potato_rate_API
    ports:
      - "8080:8080"
    environment:
      - CONFIG_PATH=${CONFIG_PATH}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_KEY=${GOOGLE_KEY}
      - GOOGLE_SECRET=${GOOGLE_SECRET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - YANDEX_KEY=${YANDEX_KEY}
      - YANDEX_SECRET=${YANDEX_SECRET}
      - YANDEX_EMAIL_PASSWORD=${YANDEX_EMAIL_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    networks:
      - my_network
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: film
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - my_network
    restart: unless-stopped

  elasticsearch:
    image: elastic/elasticsearch:8.16.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

networks:
  my_network:
    driver: bridge